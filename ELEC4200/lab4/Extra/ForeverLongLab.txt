Task 1:

module srff_behave(s,r,clk, q, qbar);

input s,r,clk;
output reg q, qbar;

always@(posedge clk)
begin

if(s == 1)
begin
q = 1;
qbar = 0;
end
else if(r == 1)
begin
q = 0;
qbar =1;
end
else if(s == 0 & r == 0) 
begin 
q <= q;
qbar <= qbar
end
end
endmodule

--------------------------------------------------------------------------------------------

Testbench:
module srff_test;
reg S,R, CLK;
wire Q, QBAR;

//2. Instantiate the module we want to test. We have instantiated the srff_behavior

srff_behavior dut(.q(Q), .qbar(QBAR), .s(S), .r(R), .clk(CLK)); // instantiation by port name.

//3. Monitor TB ports
$monitor("simtime = %g, CLK = %b, S = %b, R = %b, Q = %b, QBAR = %b", $time, CLK, S, R, Q, QBAR);

//4. apply test vectors
initial begin
  clk=0;
     forever #10 clk = ~clk;  
end 
initial begin 
 S= 1; R= 0;
 #100; S= 0; R= 1; 
 #100; S= 0; R= 0; 
 #100;  S= 1; R=1; 
end 
endmodule



-----------------------------------------------------------------------------------------
Task 2:

module sr_latch_gated(Q, Qn, G, S, R);
   output Q;
   output Qn;
   input  G;   
   input  S;
   input  R;

   wire   S1;
   wire   R1;
   
   and(S1, G, S);
   and(R1, G, R);   
   nor(Qn, S1, Q);
   nor(Q, R1, Qn);
endmodule

------------------------------------------------------------------------------------------
Testbench:

Same as #1?

-----------------------------------------------------------------------------------------

Task 3:

module d_latch (q, rstn, en, d);
input d, en rstn;
output reg q;

always @ (en or rstn or d)
if (!rstn)
q <= 0;
else
if(en)
q <= d;

endmodule
-----------------------------------------------------------------------------------------
Testbench:

module tb_latch;
reg d;
reg en;
reg rstn;
reg [2:0] delay;
reg [1:0] delay2;
integer i;


d_latch dl0 (.d(d), .en(en), .rstn(rstn), .q(q));

$monitor ("[%0t] en=%0b d=%0b q=%0b", $time, en, d, q);

d <= 0;
en <= 0;
rstn <= 0;

#10 rstn <= 1;

for (i=0; i<5; i=i+1) begin
delay = $random;
delay2 = $random;
#(delay2) en <= ~en;
#(delay) d <= i;
end
end
endmodule

-------------------------------------------------------------------------------------
Task 4:

module dff_syncclr_behavioral(d,clk,clear,q,qbar); 
input d, clk, clear; 
output reg q, qbar; 
always@(posedge clk) 
begin
if(clear== 1)
q <= 0;
qbar <= 1;
else 
q <= d; 
qbar = !d; 
end 
endmodule

---------------------------------------------------------------------------------
Testbench:
module dff_test;
reg D, CLK,reset;
wire Q, QBAR;


dff_syncclr_behavior dut(.q(Q), .qbar(QBAR), .clear(reset), .d(D), .clk(CLK)); // instantiation by port name.

//3. Monitor TB ports
$monitor("simtime = %g, CLK = %b, D = %b,reset = %b, Q = %b, QBAR = %b", $time, CLK, D, reset, Q, QBAR);

//4. apply test vectors
initial begin
  clk=0;
     forever #10 clk = ~clk;  
end 
initial begin 
 reset=1; D <= 0;
 #100; reset=0; D <= 1;
 #100; D <= 0;
 #100; D <= 1;
end 
endmodule

--------------------------------------------------------------------------------
Task 5:

module this_sux(clk,D,Qa,Qb,Qc);
input D,clk;
output reg Qa,Qb,Qc;

always@(clk,D)
begin
if(clk)
Qa=D;
else
Qa=Qa;
end

always@(posedge clk)
begin
Qb<=D;
end

always@(negedge clk)
begin
Qc<=D;
end

endmodule
----------------------------------------------------------------------------------
Test:
module test();
reg D,clk;
wire Qa,Qb,Qc;

this_sux t1(clk,D,Qa,Qb,Qc);

initial
begin
clk=0;
#10 clk=1;
#10 clk=0;
#10 clk=1;
#10 clk=0;
end

initial
begin
D=0;
#8 D=1;
#3 D=0;
#1 D=1;
#3 D=0;
#6 D=1;
#3 D=0;
#2 D=1;
#2 D=0;
#4 D=1;
#2 D=0;
#2 D=1;
#7 D=0;
end
endmodule
------------------------------------------------------------------------------------
Task 6:
//ALREADY DID THIS FOR TASK 4 SO IM RE-USING THIS GOLD

module dff_syncclr_behavioral(d,clk,clear,q,qbar); 
input d, clk, clear; 
output reg q, qbar; 
always@(posedge clk) 
begin
if(clear== 1)
q <= 0;
qbar <= 1;
else 
q <= d; 
qbar = !d; 
end 
endmodule

----------------------------------------------------------------------------------
Test:

module dff_test;
reg D, CLK,reset;
wire Q, QBAR;


dff_syncclr_behavior dut(.q(Q), .qbar(QBAR), .clear(reset), .d(D), .clk(CLK)); // instantiation by port name.

//3. Monitor TB ports
$monitor("simtime = %g, CLK = %b, D = %b,reset = %b, Q = %b, QBAR = %b", $time, CLK, D, reset, Q, QBAR);

//4. apply test vectors
initial begin
  clk=0;
     forever #10 clk = ~clk;  
end 
initial begin 
 reset=1; D <= 0;
 #100; reset=0; D <= 1;
 #100; D <= 0;
 #100; D <= 1;
end 
endmodule
------------------------------------------------------------------------------
Task 7:

module DFF(
        Clk,
        CE,
        reset,
        D,
        set,
        Q
        );
        
//list the inputs 
    input Clk;
    input CE;
     input reset;
     input D;
     input set;
//list the outputs 
    output Q;
//Internal variables
     reg Q;
     
    //flip flop state is affected only on postive edge of clock 
    always @(posedge(Clk))
    begin
        if(Clk == 1) 
        begin
            if (reset == 1) //check for active high reset
                Q = 0;  
            else if(set == 1)   //check for set
             Q = 1; 
         else if (CE == 1) //check if clock is enabled
                 Q = D;       
      end      
    end 
    
endmodule

-----------------------------------------------------------------------------
Test:
module tb_DFF;

    // Inputs
    reg Clk;
    reg CE;
    reg reset;
    reg D;
    reg set;

    // Outputs
    wire Q;

    // Instantiate the Unit Under Test (UUT)
    DFF uut (
        .Clk(Clk), 
        .CE(CE), 
        .reset(reset), 
        .D(D), 
        .set(set), 
        .Q(Q)
    );

//Clock generation with 100 MHz frequency.
    initial Clk = 0;
    always #10 Clk =~Clk;
    
    initial begin
        //Initialize inputs.
        CE = 0;
        reset = 0;
        D = 0;
        set = 0;
        #100;
        //Apply the inputs.
        D=1;
        reset = 1; #100;
        reset = 0; #100;
        set = 1; #100;
        set = 0; #100;
        CE = 1; #100;
        D = 0;  #100;
        CE = 0; #100;
        D = 1;  #100;
        set = 1; #100;
        set = 0; #100;
    end
      
endmodule

--------------------------------------------------------------------------------
Task 8:


