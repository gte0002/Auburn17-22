// Task 1

module mux_4to1(in, sel, out);
	input [3:0] in;
	input [1:0] sel;
	output reg out;
	always @ (in or sel)
		begin
		    if(sel == 2'b00) out = in[0];
		    else if(sel == 2'b01) out = in[1];
		    else if(sel == 2'b10) out = in[2];
		    else out = in[3];
	end
endmodule


// Task 1_tb

module mux_4to1_tb;
	reg [3:0] in;
	reg [1:0]sel;
	wire out;
	mux_4to1 UUT(.in(in), .sel(sel), .out(out));
	initial
	   begin
		in = 0;
		#5 sel = 2'b00;
		#5 in = 1;
		#5 sel = 2'b01;
		#5 in = 7;
		#5 sel = 2'b10;
		#5 in = 0;
		#5 sel = 2'b11;
		#5 in = 15;
		#10 $finish;
	end
endmodule

// Task 2

module graycode_generator(bcd,enable_in,enable_out,out);
	input enable_in;
	input [3:0] bcd;
	output reg enable_out;
	output reg [3:0] out;

	always @ (enable_in or bcd)
		if (enable_in == 1'b1)
		    begin
		    enable_out = 1'b0;
			case(bcd)
			    4'b0000: out = 4'b0000; //00
			    4'b0001: out = 4'b0001; //01
			    4'b0010: out = 4'b0011; //02
			    4'b0011: out = 4'b0010; //03
			    4'b0100: out = 4'b0110; //04
			    4'b0101: out = 4'b0111; //05
			    4'b0110: out = 4'b0101; //06
			    4'b0111: out = 4'b0100; //07
			    4'b1000: out = 4'b1100; //08
			    4'b1001: out = 4'b1101; //09
			    default: begin
				     out = 4'b1111;
				     enable_out = 1'b1;
				     end
			endcase
		     end
		else
	   	     begin out = 4'b1111; enable_out = 1'b1; end
endmodule


// Task 3

module dff( input D, input clk, input rst, output reg Q);
always @ (posedge clk or posedge rst)
begin
if (rst == 1)
Q <= 1'b0;
else
Q <= D;
end
endmodule
module clk_div_5M_to_10k( input clk, input rst, output clk_out );
wire [8:0]din;
wire [8:0]clk_div;
dff dff_1(.clk(clk), .rst(rst), .D(din[0]), .Q(clk_div[0]));
dff dff_2(.clk(clk_div[0]), .rst(rst), .D(din[1]), .Q(clk_div[1]));
dff dff_3(.clk(clk_div[1]), .rst(rst), .D(din[2]), .Q(clk_div[2]));
dff dff_4(.clk(clk_div[2]), .rst(rst), .D(din[3]), .Q(clk_div[3]));
dff dff_5(.clk(clk_div[3]), .rst(rst), .D(din[4]), .Q(clk_div[4]));
dff dff_6(.clk(clk_div[4]), .rst(rst), .D(din[5]), .Q(clk_div[5]));
dff dff_7(.clk(clk_div[5]), .rst(rst), .D(din[6]), .Q(clk_div[6]));
dff dff_8(.clk(clk_div[6]), .rst(rst), .D(din[7]), .Q(clk_div[7]));
dff dff_9(.clk(clk_div[7]), .rst(rst), .D(din[8]), .Q(clk_div[8]));
assign din = ~clk_div;
assign clk_out = clk_div[8];
endmodule

// Task 4

module dff(D, clk, rst, Q);
input D, clk, rst;
output reg Q;
always @ (posedge clk or posedge rst)
begin
if (rst == 1)
Q <= 1'b0;
else
Q <= D;
end
endmodule
module clk_divider(clk, rst, clk_out);
input clk, rst;
output clk_out;
wire [12:0]din;
wire [12:0]clk_div;
dff dff_inst0(.clk(clk), .rst(rst), .D(din[0]), .Q(clk_div[0]));
genvar i;
generate
for (i = 1; i < 13; i=i+1)
begin : dff_gen_label
dff dff_inst ( .clk(clk_div[i-1]), .rst(rst), .D(din[i]), .Q(clk_div[i]));
end
endgenerate
assign din = ~clk_div;
assign clk_out = clk_div[12];
endmodule
module comparator_dataflow(in, out); //Output 1 when input is greater than 9
input [3:0]in;
output out;
assign out = in[3] & (in[2] | in[1]);
endmodule
module circuitA_dataflow(a_in, a_out); //Circuit A determines m2:m0 when greater than 9
input [2:0]a_in;
output [2:0]a_out;
assign a_out[0] = a_in[0];
assign a_out[1] = ~a_in[1];
assign a_out[2] = a_in[2] & a_in[1];
endmodule
module mux_2to1(x,y,s,m); //Dataflow 2to1 mux based on Lab1
input x,y,s;
output m;
assign m = (~s & x) | (s & y);
endmodule
module bcd_7seg(x,seg);
input [3:0]x;
output [6:0]seg;
assign seg[0] = (~x[3] & ~x[1] & (x[2] ^ x[0]));
assign seg[1] = ~x[3] & x[2] & (x[1] ^ x[0]);
assign seg[2] = ~x[3] & ~x[2] & x[1] & ~x[0];
assign seg[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | (~x[3] & x[2] & ~x[1] & ~x[0]) | (~x[3] & x[2] & x[1] &x[0]);
assign seg[4]= x[0] | (~x[3] & x[2] & ~x[1]);
assign seg[5] = (x[1] & x[0]) | (~x[3] & ~x[2] & (x[1] ^ x[0]));
assign seg[6] = ~x[3] & ((~x[2] & ~x[1]) | (x[0] & (x[2] ~^ x[1])));
endmodule
module Lab2_2(clk, v, an_out, seg_out);
input clk;
input [3:0]v;
output reg [7:0]an_out;
output reg [6:0]seg_out;
wire z;
wire [3:0] m_out;
wire [2:0] circuitA_in = v[2:0];
wire [2:0] circuitA_out;
wire [7:0]an0,an1;
wire [6:0]seg0,seg1;
comparator_dataflow C1(v, z);
circuitA_dataflow circuitA(circuitA_in, circuitA_out);
mux_2to1 M3(v[3], 1'b0, z, m_out[3]);
mux_2to1 M2(v[2], circuitA_out[2], z, m_out[2]);
mux_2to1 M1(v[1], circuitA_out[1], z, m_out[1]);
mux_2to1 M0(v[0], circuitA_out[0], z, m_out[0]);
bcd_7seg D1(m_out, seg0);
bcd_7seg D2({3'b000,z}, seg1);
assign an0 = 8'b11111110;
assign an1 = 8'b11111101;
always @(posedge clk)
begin
case(an_out)
8'b11111110: begin an_out <= an1; seg_out <= seg1; end
8'b11111101: begin an_out <= an0; seg_out <= seg0; end
default: begin an_out <= an0; seg_out <= seg0; end
endcase
end
endmodule
module Lab9_2(clk, bin_in, anode, segment);
input clk;
input [3:0]bin_in;
output [7:0]anode;
output [6:0]segment;
Lab2_2 bcd_display(.clk(clk), .v(bin_in), .an_out(anode), .seg_out(segment));
endmodule


// Task 5

module Lab9_3(clk, ce, reset, count);
input clk, ce, reset;
output [7:0]count;
wire [3:0] MSB,LSB;
wire threshold1, threshold2;
wire counter1_rst, counter2_rst;
dec_binary_counter C1(.CLK(clk), .CE(ce), .SCLR(counter1_rst), .THRESH0(threshold1), .Q(LSB));
dec_binary_counter C2(.CLK(clk), .CE(threshold1), .SCLR(counter2_rst), .THRESH0(threshold2), .Q(MSB));
assign counter1_rst = reset | threshold1;
assign counter2_rst = reset | threshold2;
assign count = {MSB, LSB};
endmodule
module dff(D, clk, rst, Q);
input D, clk, rst;
output reg Q;
always @ (posedge clk or posedge rst)
begin
if (rst == 1)
Q <= 1'b0;
else
Q <= D;
end
endmodule
module clk_divider(clk, reset, clk_out);
input clk, reset;
output clk_out;
wire [8:0]din;
wire [8:0]clk_div;
dff dff_1(.clk(clk), .rst(reset), .D(din[0]), .Q(clk_div[0]));
dff dff_2(.clk(clk_div[0]), .rst(reset), .D(din[1]), .Q(clk_div[1]));
dff dff_3(.clk(clk_div[1]), .rst(reset), .D(din[2]), .Q(clk_div[2]));
dff dff_4(.clk(clk_div[2]), .rst(reset), .D(din[3]), .Q(clk_div[3]));
dff dff_5(.clk(clk_div[3]), .rst(reset), .D(din[4]), .Q(clk_div[4]));
dff dff_6(.clk(clk_div[4]), .rst(reset), .D(din[5]), .Q(clk_div[5]));
dff dff_7(.clk(clk_div[5]), .rst(reset), .D(din[6]), .Q(clk_div[6]));
dff dff_8(.clk(clk_div[6]), .rst(reset), .D(din[7]), .Q(clk_div[7]));
dff dff_9(.clk(clk_div[7]), .rst(reset), .D(din[8]), .Q(clk_div[8]));
assign din = ~clk_div;
assign clk_out = clk_div[8];
endmodule

// Task 6

module fulladder_gate(a, b, cin, s, p, g);
input a,b,cin;
output s,p,g;
wire w1;
parameter AND_DELAY = 2, OR_DELAY = 2, XOR_DELAY = 2;
xor #(XOR_DELAY) (w1,a,b);
xor #(XOR_DELAY) (s,w1,cin);
or #(OR_DELAY) (p,a,b);
and #(AND_DELAY) (g,a,b);
endmodule
module cla_logic(cin, p, g, cout);
input cin;
input [3:0]p,g;
output [3:0]cout;
parameter AND_DELAY = 2, OR_DELAY = 2;
wire [3:0]c;
and #(AND_DELAY) (c[0],p[0],cin);
or #(OR_DELAY) (cout[0],g[0],c[0]);
and #(AND_DELAY) (c[1],p[1],c[0]);
or #(OR_DELAY) (cout[1],g[1],c[1]);
and #(AND_DELAY) (c[2],p[2],c[1]);
or #(OR_DELAY) (cout[2],g[2],c[2]);
and #(AND_DELAY) (c[3],p[3],c[2]);
or #(OR_DELAY) (cout[3],g[3],c[3]);
endmodule
module Lab9_4(a, b, cin, s, cout);
input [3:0]a, b;
input cin;
output [3:0]s;
output cout;
wire [3:0]p, g;
wire [3:0]cla_out;
fulladder_gate #(3,3,4) FA0(a[0], b[0], cin, s[0], p[0], g[0]);
fulladder_gate #(3,3,4) FA1(a[1], b[1], cla_out[0], s[1], p[1], g[1]);
fulladder_gate #(3,3,4) FA2(a[2], b[2], cla_out[1], s[2], p[2], g[2]);
fulladder_gate #(3,3,4) FA3(a[3], b[3], cla_out[2], s[3], p[3], g[3]);
cla_logic #(3,3) CLA(cin, p, g, cla_out);
buf(cout, cla_out[3]);
endmodule

// Task 6_tb

module Lab9_4_tb();
reg [3:0]a_in;
reg [3:0]b_in;
reg cin;
wire [3:0]s_out;
wire cout;
integer i,k;
Lab9_4 DUT(.a(a_in), .b(b_in), .cin(cin), .s(s_out), .cout(cout));
initial
begin
cin = 0;
a_in = 0;
b_in = 0;
for(i = 0; i < 2; i=i+1)
begin
if(i == 1)
cin = 1;
for(k = 0; k < 15; k=k+1)
begin
#10 a_in = k; b_in = k+1;
end
end
end
endmodule

//  Task 7

module fulladder_gate(a, b, cin, s, p, g);
input a,b,cin;
output s,p,g;
wire w1;
parameter AND_DELAY = 2, OR_DELAY = 2, XOR_DELAY = 2;
xor #(XOR_DELAY) (w1,a,b);
xor #(XOR_DELAY) (s,w1,cin);
or #(OR_DELAY) (p,a,b);
and #(AND_DELAY) (g,a,b);
endmodule
module cla_logic(cin, p, g, cout);
input cin;
input [3:0]p,g;
output [3:0]cout;
parameter AND_DELAY = 2, OR_DELAY = 2;
wire [3:0]c;
and #(AND_DELAY) (c[0],p[0],cin);
or #(OR_DELAY) (cout[0],g[0],c[0]);
and #(AND_DELAY) (c[1],p[1],c[0]);
or #(OR_DELAY) (cout[1],g[1],c[1]);
and #(AND_DELAY) (c[2],p[2],c[1]);
or #(OR_DELAY) (cout[2],g[2],c[2]);
and #(AND_DELAY) (c[3],p[3],c[2]);
or #(OR_DELAY) (cout[3],g[3],c[3]);
endmodule
module Lab9_5(a, b, cin, s, cout);
input [3:0]a, b;
input cin;
output [3:0]s;
output cout;
wire [3:0]p, g;
wire [3:0]cla_out;
fulladder_gate FA0(a[0], b[0], cin, s[0], p[0], g[0]);
fulladder_gate FA1(a[1], b[1], cla_out[0], s[1], p[1], g[1]);
fulladder_gate FA2(a[2], b[2], cla_out[1], s[2], p[2], g[2]);
fulladder_gate FA3(a[3], b[3], cla_out[2], s[3], p[3], g[3]);
cla_logic CLA(cin, p, g, cla_out);
buf(cout, cla_out[3]);
endmodule

// Task 7_tb

module Lab9_5_tb();
reg [3:0]a_in;
reg [3:0]b_in;
reg cin;
wire [3:0]s_out;
wire cout;
integer i,k;
defparam DUT.FA0.AND_DELAY=3, DUT.FA0.OR_DELAY=3, DUT.FA0.XOR_DELAY=4;
defparam DUT.FA1.AND_DELAY=3, DUT.FA1.OR_DELAY=3, DUT.FA1.XOR_DELAY=4;
defparam DUT.FA2.AND_DELAY=3, DUT.FA2.OR_DELAY=3, DUT.FA2.XOR_DELAY=4;
defparam DUT.FA3.AND_DELAY=3, DUT.FA3.OR_DELAY=3, DUT.FA3.XOR_DELAY=4;
defparam DUT.CLA.AND_DELAY=3, DUT.CLA.OR_DELAY=3;
Lab9_5 DUT(.a(a_in), .b(b_in), .cin(cin), .s(s_out), .cout(cout));
initial
begin
cin = 0;
a_in = 0;
b_in = 0;
for(i = 0; i < 2; i=i+1)
begin
if(i == 1)
cin = 1;
for(k = 0; k < 15; k=k+1)
begin
#10 a_in = k; b_in = k+1;
end
end
end
endmodule